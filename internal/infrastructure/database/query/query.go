// Package query contains GORM Gen generated code
// This file will be replaced by generated code when running: go run internal/infrastructure/database/gen.go
package query

import (
	"clean-arch-gin/internal/adapters/shared/models"

	"gorm.io/gorm"
)

// Query struct contains all generated query methods
// This is a placeholder - will be generated by GORM Gen
type Query struct {
	db        *gorm.DB
	UserModel userModelDo
}

// Use initializes and returns the Query struct
func Use(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		UserModel: newUserModelDo(db),
	}
}

// Placeholder for generated UserModel query methods
type userModelDo struct {
	db *gorm.DB
}

func newUserModelDo(db *gorm.DB) userModelDo {
	return userModelDo{db: db}
}

// Placeholder methods - these will be replaced by GORM Gen
func (u userModelDo) Create(user *models.UserModel) error {
	return u.db.Create(user).Error
}

func (u userModelDo) Where(conds ...interface{}) userModelDo {
	return u
}

func (u userModelDo) First() (*models.UserModel, error) {
	var user models.UserModel
	err := u.db.First(&user).Error
	return &user, err
}

func (u userModelDo) Find() ([]*models.UserModel, error) {
	var users []*models.UserModel
	err := u.db.Find(&users).Error
	return users, err
}

func (u userModelDo) Updates(values interface{}) (int64, error) {
	result := u.db.Updates(values)
	return result.RowsAffected, result.Error
}

func (u userModelDo) Delete() (int64, error) {
	result := u.db.Delete(&models.UserModel{})
	return result.RowsAffected, result.Error
}

func (u userModelDo) Count() (int64, error) {
	var count int64
	err := u.db.Model(&models.UserModel{}).Count(&count).Error
	return count, err
}

func (u userModelDo) Limit(limit int) userModelDo {
	return u
}

func (u userModelDo) Offset(offset int) userModelDo {
	return u
}

func (u userModelDo) Select(columns ...interface{}) userModelDo {
	return u
}

// Placeholder field methods for type-safe queries
type field struct{}

func (f field) Eq(value interface{}) interface{}   { return nil }
func (f field) Like(value interface{}) interface{} { return nil }
func (f field) IsNull() interface{}                { return nil }

// Placeholder field properties
var (
	ID        = field{}
	Email     = field{}
	Name      = field{}
	DeletedAt = field{}
	ALL       = "*"
)

// Add field properties to userModelDo
func (u userModelDo) ID() field        { return ID }
func (u userModelDo) Email() field     { return Email }
func (u userModelDo) Name() field      { return Name }
func (u userModelDo) DeletedAt() field { return DeletedAt }
func (u userModelDo) ALL() string      { return ALL }
